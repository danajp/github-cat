#!/usr/bin/env ruby

# Set up gems listed in the Gemfile.
ENV['BUNDLE_GEMFILE'] ||= File.expand_path('./Gemfile', __FILE__)

require 'bundler/setup' if File.exist?(ENV['BUNDLE_GEMFILE'])

require 'base64'
require 'json'
require 'octokit'
require 'optparse'

class GithubCat
  include Enumerable

  def initialize(args)
    @repo_name = true
    @json = false

    option_parser.parse!(args)

    option_parser.parse!(%w(--help)) unless args.length == 2
    @org, @path = args
  end

  def run
    if @json
      print_json
    else
      print_text
    end
  end

  private

  def option_parser
    @option_parser ||= OptionParser.new do |parser|
      parser.banner = "Usage: github-cat ORG PATH"

      parser.on("--no-repo-name", "-n", "Do not prefix lines with repo name") do
        @repo_name = false
      end

      parser.on("--json", "JSON output") do
        @json = true
      end

      parser.on("--include-archived", "Include archived repos (off by default)") do
        @archived = true
      end

      parser.on("--include-forks", "Include forked repos (off by default)") do
        @forked = true
      end

      parser.on("--regex=REGEX", "-rREGEX", "Filter lines in file by regex (Ruby syntax)") do |re|
        @regex = re
      end

      parser.on("--help", "-h", "Prints this help") do
        puts parser
        exit
      end
    end
  end

  def print_text
    each do |result|
      result[:content].lines.each do |line|
        if @repo_name
          puts "#{result[:repo]}:#{line}"
        else
          puts line
        end
      end
    end
  end

  def print_json
    puts to_a.to_json
  end

  def client
    @client ||= Octokit::Client.new(access_token: ENV.fetch('GITHUB_API_TOKEN')).tap do |c|
      c.auto_paginate = true
    end
  end

  def filter_forked(repo)
    @forked || repo.forked
  end

  def filter_archived(repo)
    @archived || repo.archived
  end

  def filter_regex(content)
    return content unless @regex

    re = Regexp.new(@regex)

    content.lines.select { |line| re.match?(line) }.join("\n")
  end

  def each
    repos = client
      .organization_repositories(@org)
      .reject(&method(:filter_archived))
      .reject(&method(:filter_forked))
      .map { |r| "#{@org}/#{r.name}" }

    repos.each do |repo|
      content = Base64.decode64(client.contents(repo, path: @path).content)

      result = {
        repo: repo,
        content: filter_regex(content)
      }

      yield result
    rescue Octokit::NotFound
      next
    end
  end
end

GithubCat.new(ARGV).run
